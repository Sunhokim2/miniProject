spring.application.name=backProject

# DataSource Configuration (docker-compose.yml의 postgres-local 환경 변수를 그대로 사용하되, 호스트는 localhost로 수정)
spring.datasource.url=jdbc:postgresql://localhost:5433/localDB?binaryTransfer=true
spring.datasource.username=postgres
spring.datasource.password=1234
spring.datasource.driver-class-name=org.postgresql.Driver

# Binary data handling - 바이너리 데이터 처리를 위한 설정
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.use_streams_for_binary=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.datasource.hikari.data-source-properties.stringtype=unspecified

# JPA/Hibernate Configuration (테스트용 설정)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.open-in-view=false

# Jackson JSON 설정
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES=false

# Naver API Credentials SEARCH (backProject의 로컬 .env 파일 또는 시스템 환경 변수로 정의)
naver.client.id=${NAVER_CLIENT_ID}
naver.client.secret=${NAVER_CLIENT_SECRET}

# Naver Maps (backProject의 로컬 .env 파일 또는 시스템 환경 변수로 정의)
naver.map.client-id=${NAVER_MAP_ID}
naver.map.client-secret=${NAVER_MAP_SECRET}

# GPT API (backProject의 로컬 .env 파일 또는 시스템 환경 변수로 정의)
openai.api.url=${OPEN_API_URL}
openai.api.key=${OPEN_API_KEY}

# Logging Configuration (테스트용 로깅 설정)
logging.level.root=INFO
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.example.backproject.service=DEBUG
logging.level.org.example.backproject.controller=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.example.backproject.security=DEBUG
logging.level.org.hibernate.SQL=TRACE
logging.level.org.hibernate.type.descriptor.sql=TRACE
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.type=TRACE
logging.level.org.hibernate.persister.entity=TRACE
logging.level.org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl=TRACE

# OAuth2 Debug Logging (테스트용 OAuth2 로깅 설정)
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security.oauth2.client=DEBUG
logging.level.org.springframework.security.oauth2.server=DEBUG

# 소셜로그인 (테스트용 구글 소셜 로그인 설정, 주석 처리)
# spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
# spring.security.oauth2.client.registration.google.scope=profile,email

# 메일 관련 디버깅 (테스트용 메일 로깅 설정)
logging.level.javax.mail=DEBUG
logging.level.com.sun.mail=DEBUG

spring.docker.compose.enabled=false